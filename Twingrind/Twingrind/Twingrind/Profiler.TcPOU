<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Profiler" Id="{b9b8f223-2122-4b0c-bf7b-2e173ae50fad}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'hide_all_locals'}
PROGRAM Profiler
VAR_INPUT
  CaptureOnce : BOOL; //< On rising edge, starts to one frame
  CaptureContinuous : BOOL; //<  If set record until all frames are filled up, [MAX_FRAMES](xref:Profiler.ParameterList#MAX_FRAMES) controls how many frames are recorded. If all frames are recorded, the flag is reset
  Mode : CaptureMode;
  CaptureCpuTimeLowThreshold : LREAL; //< In percent (0 - 100) to controls the minimum cycletime that frame need to have in order to be recorded, if CaptureCpuTimeLowThreshold = CaptureCpuTimeHighThreshold = 0, all frame are recorded
  CaptureCpuTimeHighThreshold : LREAL; //< In percent (0 - 100) to controls the maximum cycletime that frame need to have in order to be recorded  
  Reset : BOOL; //< On rising edge, deletes all recorded frames
END_VAR
VAR_OUTPUT
  Busy : BOOL;
  Error : BOOL;
  ErrorMessage : STRING;
  FrameIndex : SINT;  
  Meta : ARRAY [0..ParameterList.MAX_FRAMES] OF FrameMeta;
  Data : ARRAY [0..ParameterList.MAX_FRAMES, 1..MAX_TASKS] OF ARRAY[0..ParameterList.MAX_STACKSIZE] OF FrameData;
  CycleTime : ARRAY [1..MAX_TASKS] OF UDINT; //< Cycletime for every task in 100ns
  Tasks : SINT;
END_VAR
VAR
  _size : DINT;
  _meta : REFERENCE TO FrameMeta REF= Meta[0];
  _data : REFERENCE TO ARRAY[0..ParameterList.MAX_STACKSIZE] OF FrameData REF= Data[0, 1];
  _cpuCounter : GETCPUCOUNTER;
  _profilerTaskIdx : DINT;
  _prifilerCoreIdx : DINT;
  _cycleDuration : LREAL; //< in percent
  _enabled : BOOL;
  _maxDuration : LREAL;
  _depth : DINT := 0;
  _frameRecorded : F_TRIG;
  _captureOnceTrig : R_TRIG;
  _captureContinuousTrig : R_TRIG;
  _resetTrig : R_TRIG;
  _i, _j : SINT;
  _taskIt : UDINT;
  
//  _criticalSection : FB_IecCriticalSection;
END_VAR
VAR CONSTANT
  MAX_TASKS : SINT:=1;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[//_criticalSection.Enter();
_enabled := FALSE;
_frameRecorded(CLK:=_enabled);
_captureOnceTrig(CLK:=CaptureOnce);
_resetTrig(CLK:=Reset);
_captureContinuousTrig(CLK:=CaptureContinuous);

_profilerTaskIdx := GETCURTASKINDEXEX();
_prifilerCoreIdx := F_GetCpuCoreIndex(_profilerTaskIdx);
IF (_profilerTaskIdx <= 0 ) THEN
//	_criticalSection.Leave();
  RETURN;
END_IF
// Initialization get cycle time for all tasks. Report an
// error if the PLC is using more than 1 task, because this is not
// supported atm
IF _taskIt < 1
THEN
//  IF TwinCAT_SystemInfoVarList._AppInfo.TaskCnt > SINT_TO_UDINT(MAX_TASKS)
//  THEN
//    Error := TRUE;
//    ErrorMessage := 'Twingrind only supports PLCs with 1 tasks only!';
//    RETURN;
//  END_IF
  
  Tasks := 1; //UDINT_TO_SINT(TwinCAT_SystemInfoVarList._AppInfo.TaskCnt);
  FOR _taskIt:=1 TO Tasks
  DO
    CycleTime[_taskIt] := TwinCAT_SystemInfoVarList._TaskInfo[_taskIt].CycleTime;
	END_FOR
END_IF

IF _captureContinuousTrig.Q
THEN
  CaptureOnce := 0;
  Error := FALSE;
  ErrorMessage := '';
END_IF

// Logic to only keep frames that satisfy the threshold conditions
IF _frameRecorded.Q
THEN
  _meta.Size := _size;
  _meta.TotalDuration := _data[_size-1].EndHi - _data[0].StartHi + _data[_size-1].EndLo - _data[0].StartLo;

  // Check if the frame that was just recorded should be kept, if so, find the next place in the date structure where
  // we can write into
  _cycleDuration := 100 * UDINT_TO_LREAL(TwinCAT_SystemInfoVarList._TaskInfo[_profilerTaskIdx].LastExecTime) / UDINT_TO_LREAL(TwinCAT_SystemInfoVarList._TaskInfo[_profilerTaskIdx].CycleTime);
  IF (_cycleDuration > CaptureCpuTimeLowThreshold AND_THEN _cycleDuration < CaptureCpuTimeHighThreshold) OR_ELSE 
     (CaptureCpuTimeLowThreshold = 0 AND_THEN CaptureCpuTimeHighThreshold = 0)
  THEN
    FrameIndex := NextFrameIndex();
  END_IF

END_IF

IF CaptureContinuous
THEN
  _enabled := TRUE;
  _size := 0;
ELSE
  IF _captureOnceTrig.Q
  THEN
    Error := FALSE;
    ErrorMessage := '';
    _enabled := TRUE;
    _size := 0;
  END_IF 
END_IF

// Delete all Ddata that has already been caputured
IF _resetTrig.Q
THEN
  Error := FALSE;
  ErrorMessage := '';
  FrameIndex := 0;
  MEMSET(ADR(Data), 0, SIZEOF(Data));
  MEMSET(ADR(Meta), 0, SIZEOF(Meta));
  _enabled := FALSE;
END_IF

// Prepare the current frame
Busy := _enabled;
_depth := 0;
_data REF= Data[FrameIndex, 1];
_meta REF= Meta[FrameIndex];
_meta.Id := TwinCAT_SystemInfoVarList._TaskInfo[_profilerTaskIdx].CycleCount;
_frameRecorded(CLK:=_enabled);
//_criticalSection.Leave();]]></ST>
    </Implementation>
    <Method Name="NextFrameIndex" Id="{8dd8eb4b-6627-47b8-aca6-2ccd3eea6ba1}">
      <Declaration><![CDATA[METHOD INTERNAL NextFrameIndex : SINT
VAR
  i : SINT;
  duration : LWORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE Mode
OF
  // Find the index of the fastest profile
  CaptureMode.Slowest:
    duration := 0;
    FOR i:=0 TO ParameterList.MAX_FRAMES
    DO
      IF Meta[i].TotalDuration = 0
      THEN
        NextFrameIndex := i;
        RETURN;
      ELSIF Meta[i].TotalDuration < duration OR_ELSE duration = 0
      THEN
        duration := Meta[i].TotalDuration;
        NextFrameIndex := i;
      END_IF
    END_FOR

  // Record all frames, just get the next frame index
  CaptureMode.All:
    NextFrameIndex := FrameIndex + 1;
    IF NextFrameIndex > ParameterList.MAX_FRAMES
    THEN
      NextFrameIndex := 0;
    END_IF

  // Find the index of the slowest profile
  CaptureMode.Fastest:
    duration := 0;
    FOR i:=0 TO ParameterList.MAX_FRAMES
    DO
      IF Meta[i].TotalDuration = 0
      THEN
        NextFrameIndex := i;
        RETURN;
      ELSIF Meta[i].TotalDuration > duration OR_ELSE duration = 0
      THEN
        duration := Meta[i].TotalDuration;
        NextFrameIndex := i;
      END_IF
    END_FOR

  // Only record max_frames, then no further frames are caputured
  CaptureMode.FirstOnesOnly:
    NextFrameIndex := MIN(FrameIndex + 1, ParameterList.MAX_FRAMES);

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Pop" Id="{859e770b-b663-4677-9ba3-3c5fe8fd4fc3}">
      <Declaration><![CDATA[METHOD Pop
VAR_INPUT
  hash : UDINT;
END_VAR
VAR
  currentTaskIdx : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _enabled
THEN
  RETURN;
END_IF
//_criticalSection.Enter();
// only capture task where profiler is called
IF GETCURTASKINDEXEX() <> _profilerTaskIdx
THEN
//  _criticalSection.Leave();
  RETURN;
END_IF

_depth := _depth - 1;
_data[_size].Depth := _depth;
_data[_size].Hash := hash;
_data[_size].StartHi := 0;
_data[_size].StartLo := 0;
_cpuCounter(cpuCntLoDW => _data[_size].EndLo, cpuCntHiDW => _data[_size].EndHi);

IF _depth < 0
THEN
  _enabled := FALSE;
  Error := TRUE;
  ErrorMessage := 'Pop/Push mismatch!';
//  _criticalSection.Leave();
  RETURN;   
ELSE
  _size := _size + 1;
END_IF

// abort if the stack is getting too big (too many functions were called)
IF _size > ParameterList.MAX_STACKSIZE
THEN
  _enabled := FALSE;
  Error := TRUE;
  ErrorMessage := 'The method stack is too big!';  
END_IF
//_criticalSection.Leave();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Push" Id="{26712f5b-9f3a-41ce-84ed-21cb2c030962}">
      <Declaration><![CDATA[METHOD Push
VAR_INPUT
  hash : UDINT;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _enabled
THEN
  RETURN;
END_IF
//_criticalSection.Enter();
// only capture task where profiler is called
IF GETCURTASKINDEXEX() <> _profilerTaskIdx
THEN
//  _criticalSection.Leave();
  RETURN;
END_IF
_data[_size].depth := _depth;
_data[_size].hash := hash;
_cpuCounter(cpuCntLoDW => _data[_size].StartLo, cpuCntHiDW => _data[_size].StartHi);
_data[_size].endhi := 0;
_data[_size].endlo := 0;
_size := _size + 1;
_depth := _depth + 1;

// abort if the stack is getting too big (too many functions were called)
IF _size > ParameterList.MAX_STACKSIZE
THEN
  _enabled := FALSE;
  Error := TRUE;
  ErrorMessage := 'The method stack is too big!';
END_IF
//_criticalSection.Leave();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TasksFirstPush" Id="{aa4aab76-0989-4cbd-ae45-1b2c1cfd1898}">
      <Declaration><![CDATA[METHOD TasksFirstPush
VAR_INPUT
  hash : UDINT;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _enabled
THEN
  RETURN;
END_IF
// only capture task where profiler is called
IF GETCURTASKINDEXEX() <> _profilerTaskIdx
THEN
  RETURN;
END_IF

//_criticalSection.Enter();
// we record the first push of every task in the same core so we have the interrupts in the profile
IF _prifilerCoreIdx <> F_GetCpuCoreIndex(_profilerTaskIdx)
THEN
//  _criticalSection.Leave();
  RETURN;
END_IF
_data[_size].depth := _depth;
_data[_size].hash := hash;
_data[_size].StartLo := _cpuCounter.cpuCntLoDW+1; 
_data[_size].StartHi := _cpuCounter.cpuCntHiDW;
_data[_size].endhi := 0;
_data[_size].endlo := 0;
_size := _size + 1;
_depth := _depth + 1;

// abort if the stack is getting too big (too many functions were called)
IF _size > ParameterList.MAX_STACKSIZE
THEN
  _enabled := FALSE;
  Error := TRUE;
  ErrorMessage := 'The method stack is too big!';
END_IF
//_criticalSection.Leave();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TasksLastPop" Id="{f788bc2b-1686-443e-9acc-07aa44f1af6f}">
      <Declaration><![CDATA[METHOD TasksLastPop
VAR_INPUT
  hash : UDINT;
END_VAR
VAR
  currentTaskIdx : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _enabled
THEN
  RETURN;
END_IF
// only capture task where profiler is called
IF GETCURTASKINDEXEX() <> _profilerTaskIdx
THEN
  RETURN;
END_IF
//_criticalSection.Enter();
// we record the first push of every task in the same core so we have the interrupts in the profile
IF _prifilerCoreIdx <> F_GetCpuCoreIndex(_profilerTaskIdx)
THEN
  //_criticalSection.Leave();
  RETURN;
END_IF

_depth := _depth - 1;
_data[_size].Depth := _depth;
_data[_size].Hash := hash;
_data[_size].StartHi := 0;
_data[_size].StartLo := 0;
_data[_size].EndLo := _cpuCounter.cpuCntLoDW+2;
_data[_size].EndHi := _cpuCounter.cpuCntHiDW;

IF _depth < 0
THEN
  _enabled := FALSE;
  Error := TRUE;
  ErrorMessage := 'Pop/Push mismatch!';
  //_criticalSection.Leave();
  RETURN;   
ELSE
  _size := _size + 1;
END_IF

// abort if the stack is getting too big (too many functions were called)
IF _size > ParameterList.MAX_STACKSIZE
THEN
  _enabled := FALSE;
  Error := TRUE;
  ErrorMessage := 'The method stack is too big!';  
END_IF
//_criticalSection.Leave();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>